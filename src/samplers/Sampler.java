package samplers;

import utilties.Point2D;

import java.util.List;

/**
 * @author Yuanqi Li
 * @version 0.5
 */
abstract public class Sampler {

/*--------------------------------------------------------------*\
 *  Fields
\*--------------------------------------------------------------*/

    /**
     * The number of sample points in a pattern.
     */
    int numSamples;

    /**
     * The number of sample sets (patterns) stored.
     */
    int numSets;

    /**
     * The current number of sample points used.
     */
    long count = 0;

    /**
     * Random index jump.
     */
    int jump;

    /**
     * Sample points on a unit square generated by the method <code>generateSamples()</code>.
     * It's a 1D array but can be accessed using index. For most sampling applications,
     * it's important to use different sets with adjacent pixels. If we don't do this, the
     * results can be aliasing artifacts that are far worse than the jaggies.
     */
    List<Point2D> samples;

    /**
     * Shuffled samples array indices.
     */
    List<Integer> shuffledIndices;

/*--------------------------------------------------------------*\
 *  Constructors
\*--------------------------------------------------------------*/

    public Sampler(int numSamples) {
        this.numSamples = numSamples;
    }

/*--------------------------------------------------------------*\
 *  Public methods
\*--------------------------------------------------------------*/

    /**
     * Generates sample patterns in a unit square, stored in data field <code>samples</code>.
     * Each subclass has to override this method.
     */
    abstract void generateSamples();

    /**
     * Sets up the randomly shuffled indices.
     */
    void setupShuffledIndices(){}

    /**
     * Randomly shuffle the samples in each patterns.
     */
    void shuffleSamples(){}

    /**
     * Returns sample points in a unit square. it is called from objects that need to
     * supply sample points on squares. For example, the view plane will do this for every
     * scene.
     * @return the next sample point stored in the sampler object.
     */
    public Point2D sampleUnitSquare() {
        return (samples.get((int) count++ % (numSamples * numSets)));
    }

/*--------------------------------------------------------------*\
 *  Getters and setters
\*--------------------------------------------------------------*/

    public int getNumSamples() {
        return numSamples;
    }

    public void setNumSamples(int numSamples) {
        this.numSamples = numSamples;
    }

    public int getNumSets() {
        return numSets;
    }

    public void setNumSets(int numSets) {
        this.numSets = numSets;
    }

    public long getCount() {
        return count;
    }

    public void setCount(long count) {
        this.count = count;
    }

    public int getJump() {
        return jump;
    }

    public void setJump(int jump) {
        this.jump = jump;
    }

    public List<Point2D> getSamples() {
        return samples;
    }

    public void setSamples(List<Point2D> samples) {
        this.samples = samples;
    }

    public List<Integer> getShuffledIndices() {
        return shuffledIndices;
    }

    public void setShuffledIndices(List<Integer> shuffledIndices) {
        this.shuffledIndices = shuffledIndices;
    }
}
